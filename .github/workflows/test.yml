name: Run Pester Tests

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  issues: read
  checks: write
  pull-requests: write

jobs:
  test-linux-pwsh7:
    runs-on: ubuntu-latest
    name: Test on Linux-PowerShell7
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PowerShell modules
      shell: pwsh
      run: |
        # Install Pester if not available or update to latest version
        if (Get-Module -ListAvailable -Name Pester | Where-Object {$_.Version -ge '5.0.0'}) {
          Write-Host "Pester 5.x is already installed"
        } else {
          Write-Host "Installing Pester 5.x"
          Install-Module -Name Pester -Force -SkipPublisherCheck -MinimumVersion 5.0.0
        }
        
        # Import Pester
        Import-Module Pester -Force
        
        # Display Pester version
        Get-Module Pester | Select-Object Name, Version
    
    - name: Run Pester Tests
      shell: pwsh
      run: |
        # Change to the repository root
        Set-Location $env:GITHUB_WORKSPACE
        
        # Run tests using the PesterConfig.ps1
        ./PesterConfig.ps1
        
        # Check if tests passed
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Tests failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
    
    - name: Extract Test Statistics
      shell: pwsh
      run: |
        if (Test-Path "Tests/TestResults.xml") {
          [xml]$results = Get-Content "Tests/TestResults.xml"
          $total = [int]$results.testsuites.tests
          $failures = [int]$results.testsuites.failures
          $errors = [int]$results.testsuites.errors
          $passed = $total - $failures - $errors
          
          Write-Host "::notice::Linux Tests: $passed/$total passed"
        }
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-Linux-PowerShell7
        path: |
          Tests/TestResults.xml
          Tests/CodeCoverage.xml
        retention-days: 30
    
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Pester Test Results (Linux-PowerShell7)
        path: Tests/TestResults.xml
        reporter: java-junit
        fail-on-error: false
    
    - name: Add Coverage Comment
      if: github.event_name == 'pull_request'
      shell: pwsh
      run: |
        if (Test-Path "Tests/CodeCoverage.xml") {
          [xml]$coverage = Get-Content "Tests/CodeCoverage.xml"
          $lineCounter = $coverage.report.counter | Where-Object {$_.type -eq "LINE"}
          
          if ($lineCounter) {
            $covered = [int]$lineCounter.covered
            $missed = [int]$lineCounter.missed
            $total = $covered + $missed
            
            if ($total -gt 0) {
              $lineRate = [math]::Round(($covered / $total) * 100, 2)
              Write-Host "📊 Code Coverage (Linux-PowerShell7): $lineRate% ($covered/$total lines covered)"
            } else {
              Write-Host "📊 No coverage data available"
            }
          } else {
            Write-Host "📊 No line coverage data found in report"
          }
        } else {
          Write-Host "❌ No coverage file found"
        }

  test-windows-pwsh7:
    runs-on: windows-latest
    name: Test on Windows-PowerShell7
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PowerShell modules
      shell: pwsh
      run: |
        # Install Pester if not available or update to latest version
        if (Get-Module -ListAvailable -Name Pester | Where-Object {$_.Version -ge '5.0.0'}) {
          Write-Host "Pester 5.x is already installed"
        } else {
          Write-Host "Installing Pester 5.x"
          Install-Module -Name Pester -Force -SkipPublisherCheck -MinimumVersion 5.0.0
        }
        
        # Import Pester
        Import-Module Pester -Force
        
        # Display Pester version
        Get-Module Pester | Select-Object Name, Version
    
    - name: Run Pester Tests
      shell: pwsh
      run: |
        # Change to the repository root
        Set-Location $env:GITHUB_WORKSPACE
        
        # Run tests using the PesterConfig.ps1
        ./PesterConfig.ps1
        
        # Check if tests passed
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Tests failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
    
    - name: Extract Test Statistics
      shell: pwsh
      run: |
        if (Test-Path "Tests/TestResults.xml") {
          [xml]$results = Get-Content "Tests/TestResults.xml"
          $total = [int]$results.testsuites.tests
          $failures = [int]$results.testsuites.failures
          $errors = [int]$results.testsuites.errors
          $passed = $total - $failures - $errors
          
          Write-Host "::notice::Windows Tests: $passed/$total passed"
        }
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-Windows-PowerShell7
        path: |
          Tests/TestResults.xml
          Tests/CodeCoverage.xml
        retention-days: 30
    
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Pester Test Results (Windows-PowerShell7)
        path: Tests/TestResults.xml
        reporter: java-junit
        fail-on-error: false
    
    - name: Add Coverage Comment
      if: github.event_name == 'pull_request'
      shell: pwsh
      run: |
        if (Test-Path "Tests/CodeCoverage.xml") {
          [xml]$coverage = Get-Content "Tests/CodeCoverage.xml"
          $lineCounter = $coverage.report.counter | Where-Object {$_.type -eq "LINE"}
          
          if ($lineCounter) {
            $covered = [int]$lineCounter.covered
            $missed = [int]$lineCounter.missed
            $total = $covered + $missed
            
            if ($total -gt 0) {
              $lineRate = [math]::Round(($covered / $total) * 100, 2)
              Write-Host "📊 Code Coverage (Windows-PowerShell7): $lineRate% ($covered/$total lines covered)"
            } else {
              Write-Host "📊 No coverage data available"
            }
          } else {
            Write-Host "📊 No line coverage data found in report"
          }
        } else {
          Write-Host "❌ No coverage file found"
        }
  update-badges:
    runs-on: ubuntu-latest
    needs: [test-linux-pwsh7, test-windows-pwsh7]
    if: always() && github.ref == 'refs/heads/main'
    name: Update Test Badges
    
    steps:
    - name: Checkout badges branch
      uses: actions/checkout@v4
      with:
        ref: badges
        path: badges-repo
      continue-on-error: true
    
    - name: Create badges branch if it doesn't exist
      run: |
        if [ ! -d "badges-repo" ]; then
          mkdir -p badges-repo
          cd badges-repo
          git init
          git checkout -b badges
          echo "# Badge Data" > README.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "Initialize badges branch"
        fi
    
    - name: Download Linux test results
      uses: actions/download-artifact@v4
      with:
        name: test-results-Linux-PowerShell7
        path: linux-results
      continue-on-error: true
    
    - name: Download Windows test results
      uses: actions/download-artifact@v4
      with:
        name: test-results-Windows-PowerShell7
        path: windows-results
      continue-on-error: true
    
    - name: Generate badge files
      shell: pwsh
      run: |
        # Function to create badge JSON
        function New-BadgeJson {
          param($Platform, $ResultsPath)
          
          $xmlPath = Join-Path $ResultsPath "TestResults.xml"
          if (Test-Path $xmlPath) {
            [xml]$results = Get-Content $xmlPath
            $total = [int]$results.testsuites.tests
            $failures = [int]$results.testsuites.failures
            $errors = [int]$results.testsuites.errors
            $passed = $total - $failures - $errors
            
            $badgeData = @{
              schemaVersion = 1
              label = "$Platform tests"
              message = "$passed/$total passed"
              color = if ($failures -eq 0 -and $errors -eq 0) { "success" } else { "critical" }
            }
            
            return $badgeData | ConvertTo-Json
          }
          
          # Default badge if no results found
          return @{
            schemaVersion = 1
            label = "$Platform tests"
            message = "unknown"
            color = "inactive"
          } | ConvertTo-Json
        }
        
        # Generate badges
        $linuxBadge = New-BadgeJson -Platform "Linux" -ResultsPath "linux-results"
        $windowsBadge = New-BadgeJson -Platform "Windows" -ResultsPath "windows-results"
        
        # Save to badges repo
        $linuxBadge | Out-File "badges-repo/linux-tests.json" -Encoding utf8 -NoNewline
        $windowsBadge | Out-File "badges-repo/windows-tests.json" -Encoding utf8 -NoNewline
        
        Write-Host "Badge files created"
    
    - name: Commit and push badge data
      run: |
        cd badges-repo
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add *.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update test badges - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          git push --force-with-lease origin badges
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
